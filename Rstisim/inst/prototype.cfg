# Numbers and arrays and can have an optional "y" attached to them
# which multiplies the corresponding number by 365. So, e.g.
# 1y => 365, 2y = 730, [1,2]y => [365, 730], 0.5y = 182.5
# But be careful: in expressions of the form "1/2y" the "y" binds stronger:
# "1/2y" equals 1/730 = 0.0013699, which is not the same as 0.5y!
# "1/1y" equals 1/365, which is not the same as 1y!
# This the above fraction notation is helpful when giving rate: 
# "rate = 1/2y" means an event on average every 2 years, 
# "rate = 0.5y" means 182.5 events on average every day!
#
# Distribution: There are various way of defining distributions and changing
# their behaviour:
# "distribution = number" is a distribution that returns always the same number
# "distribution = [p1,p2,p3,...,pn]" is a distribution that takes the values
0,1,...,n-1 with probabilities p1,p2,...,pn respectively.
# - "distribution = {...}" stands for a list with the folowing posibilities:
# - "{ values = [...] }": the uniform distribution on these values
# The next three should be clear (the 1.0 is the way the array should start or
# end)
# - "{ values = [...]; probabilities = [...] }
# - "{ values = [...]; distribution = [...,1.0] }
# - "{ values = [...]; survival = [1.0,...] }
# Instead of "values" one can also give a "from=<number>" tag with an
# optional "step=<number>". Meaning should be clear (if step is ommited, 1 is
# assumed by default)
# The above distribution are of type="simple".
# 
# If a tag "density=[...]" is given, this represents a distribution of type
# "linear". A "value" or "from/step" tag can be given, wihtout these "from=0;
# step=1" is assumed. This constructs a distribution that is given by a density
# which is a linear interpolation of the density values at the corresponding
# points. Outside of the possible values, a density of 0 is assumed.
# 
# Type "exponential" is an exponential distribution with tags "rate", "shift"
# and "cutat". Shift is added to the exponential and the values are cut at
# "cutat". Giving a "rate" tag automaticaly assumes this distribution.
#
# Every distribution can have a tag "randcore=<integer number>" which assigns this
# distribution to a specific random number generator. Default is "0".
# 
# Every distribution can have an tag 
#    relativeto = <"now"(default)|"birth"|"age">
# This is only relevant for distributions with in an individual, for example
# chaning bins. If birth is given, the sampled number from the distributino is
# relative to the birth of the individual; you have to be careful as this might
# cause that events are inserted before the current time, which results in an
# error. "age" stands for sampling given that it is atleast of the current age
# of the individual. In some distributions ("simple", "linear", "exponential")
# this can cause an error when age is bigger than the maximum value of the
# distribution as this would mean conditioning on an event with probability 0.
# The distribution "process" can return infinity, so conditioning is
# always possible and this is probably the only distributino where using "age"
# makes any sense.

simulation : {
  // This is just to make sure that the size of the eventlist ist big
  // enough; the size of the eventlist is this factor muliplied by
  // "parameters.population.size". If the list is too small, an 
  // Underflow exception is thrown.
  eventlistsizefactor = <integer>;
  // This is the seed for the random number generator
  seed = <integer>;
};

model : {

  population : {
    // The initial size of the population to be simulated;
    // This can change if immigration/emigration is non-zero      
    size = <integer>; 
    // The different types of people with their respective proportions of
    // birth; these are defined under "model.people"
    peopletypes = {
        names = <array of strings>;
        // distribution of the type at birth         
        distribution = <distribution integer>;
    };
    // The different types of partnership formers; usually just one.      
    // they are defined under "model.partnershipformers"
    partnershipformationtypes {
        names = <array of string>;     
    }
    // What happens if a person dies? 
    // If "replace", then a new person is born after 
    // timeofreplacement-time, if "" the population decreases by 1
    atdeath = <"replace"|"">;
    // What happens if a birth is simulated
    // if "insert", the population increases by 1, if "" nothing happens
    atbirth = <"insert"|"">;
    // The time a new individual is born after a death; 
    // only used if atdeath="replace"      
    timeofreplacement = <distribution double>;
    // The times between two immigration events
    immigration = <distribution double>;
}; 

  people : {
    // a group for each type in "model.population.types.names"
    [<name of type> : {
        basetype = ["GENERIC","MALE","FEMALE"];
        [bins = {
            names = <array of strings>;
            // The distribution at birth of an individual            
            distribution = <distribution integer>;
            // Ths transitions during lifetime            
            [transitions = {
                names = [<names of the transition>];
                <name of transition> : {
                    from = <binname>;
                    to = <binname>; 
                    at = <distribution double(ageable)>;
                } (repeat for each transition); 
            };]
        };]
        // This value is subtracted at every birth
        birthshift = <distribution double>; 
        // This is the lifespan of the individuall and is sampled,
        // conditionend on beeing >=birthshift and resampled 
        // if =birthshift, so be careful...
        lifespan = <distribution (conditioned on birthshift)>;
        // Must be a number in (0,1). The actual time of birth is calculated as 
        // timebirth = now - birthshift - initrandomization*(lifespan-birthshift)
        initialrandomisation = <distribution double>; 
        // This is the age structure of people that immigrate,
        // The lifespan is calculated from lifespan, conditioned on being >=immigrationage
        immigrationage = <distribution double>;
        
        // Here one can install distributions for this type, used by other modules
        // For each tag, a corresponding distribution is installed;
        // if the distributions contains groups with the binnames, for each bin a distribution 
        // is installed; if a sample from a person is requested, the one is taken in which the
        // is in person.
       [attributes : {
           [<name> = <distribution>; (depending on use)]
           [<name> = { 
               [fixatbirth;] // samples the attribute only once at birth of individual
               [perbin|sizedependent="bin"; 
                <name of bin> = <distribution>; (depending on use) (repeat for each bin)]
               [sizedependent="numpartners";
                0=<distribution>;
                1=<distribution>;
                5=<distribution>;
                8=stop;]
            };]
        };]
        
        
    };] (repeat for each type defined in model.population.types.names)
  };
    
  partnershipsformation : {
      
  }; 
};
